<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="amqpqueue.consume" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>AMQPQueue::consume</refname>
  <refpurpose>Consume messages from a queue</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>AMQPQueue::consume</methodname>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>AMQP_NOPARAM</constant></initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>consumerTag</parameter></methodparam>
  </methodsynopsis>
  <para>
   Blocking function that will retrieve the next message from the queue as it becomes available and will pass it off to the callback.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
     <varlistentry>
      <term><parameter>callback</parameter></term>
      <listitem>
       <para>
        A callback function to which the consumed message will be passed. The function must accept at a minimum one parameter, an <classname>AMQPEnvelope</classname> object,
        and an optional second parameter the <classname>AMQPQueue</classname> from which the message was consumed.
       </para>
       <para>
         The <methodname>AMQPQueue::consume</methodname> will not return the processing thread back to the PHP script until the callback function returns &false;.
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       A bitmask of any of the flags: <constant>AMQP_NOACK</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>consumerTag</parameter></term>
     <listitem>
      <para>
        A string describing this consumer. Used for ending subscriptions
        with <methodname>AMQPQueue::cancel</methodname>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Throws <classname>AMQPChannelException</classname> if the channel is not open.
  </para>
  <para>
   Throws <classname>AMQPConnectionException</classname> if the connection to the broker was lost.
  </para>
  <para>
   Throws <classname>AMQPQueueException</classname> if the channel is closed
   unexpectedly.
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><methodname>AMQPQueue::consume</methodname> example</title>
    <programlisting role="php">
     <![CDATA[
     <?php

     /* Create a connection using all default credentials: */
     $connection = new AMQPConnection();
     $connection->connect();

     $channel = new AMQPChannel($connection);

     /* create a queue object */
     $queue = new AMQPQueue($channel);

     //declare the queue
     $queue->declareQueue('myqueue');

     $i = 0;
     function processMessage($envelope, $queue) {
        global $i;
        echo "Message $i: " . $envelope->getBody() . "\n";
        $i++;
        if ($i > 10) {
            // Bail after 10 messages
            return false;
        }
     }

     // Consume messages on queue
     $queue->consume("processMessage");

     ?>
     ]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
