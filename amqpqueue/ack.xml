<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 323238 $ -->

<refentry xml:id="amqpqueue.ack" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>AMQPQueue::ack</refname>
  <refpurpose>Acknowledge the receipt of a message</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>AMQPQueue::ack</methodname>
   <methodparam><type>int</type><parameter>delivery_tag</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>AMQP_NOPARAM</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
    This method allows the acknowledgement of a message that is retrieved without the <constant>AMQP_AUTOACK</constant> flag through
    <methodname>AMQPQueue::get</methodname> or <methodname>AMQPQueue::consume</methodname>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>delivery_tag</parameter></term>
     <listitem>
      <para>
       The message delivery tag of which to acknowledge receipt.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       The only valid flag that can be passed is <constant>AMQP_MULTIPLE</constant>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Throws <classname>AMQPChannelException</classname> if the channel is not open.
  </para>
  <para>
   Throws <classname>AMQPConnectionException</classname> if the connection to the broker was lost.
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><methodname>AMQPQueue::ack</methodname> example with <methodname>AMQPQueue::get</methodname></title>
    <programlisting role="php">
<![CDATA[
<?php

/* Create a connection using all default credentials: */
$connection = new AMQPConnection();
$connection->connect();

$channel = new AMQPChannel($connection);

/* create a queue object */
$queue = new AMQPQueue($channel);

//declare the queue
$queue->declare('myqueue');

//get the next message, but don't mark it as delivered
$message = $queue->get(AMQP_NOPARAM);

echo $message['msg'];

//acknowledge the message as received
$queue->ack($message['delivery_tag']);

?>
]]>
    </programlisting>
   </example>
   <example>
    <title><methodname>AMQPQueue::ack</methodname> example with <methodname>AMQPQueue::consume</methodname></title>
    <programlisting role="php">
<![CDATA[
<?php

/* Create a connection using all default credentials: */
$connection = new AMQPConnection();
$connection->connect();

/* create a queue object */
$queue = new AMQPQueue($connection);

//declare the queue
$queue->declare('myqueue');

$options = array(
    'min' => 1,
    'max' => 10,
    'ack' => false
);

//get the messages, but don't mark them as delivered
$messages = $queue->consume($options);

foreach ($messages as $message) {
    echo $message['message_body'];
    //acknowledge the message as received
    $queue->ack($message['delivery_tag']);
}

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
